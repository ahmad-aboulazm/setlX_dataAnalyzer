// This file contains two methods for solving the 0/1-knapsack problem:  
// Given is a set of triples of the form
//       p := { [v1, w1, 1], ..., [v1, w1, n] } 
// where the ith triple
//       [vi, wi, i]
// is interpreted as denoting an object with value vi and weight wi.  The
// index i is needed to artificially keep objects that happen to have the
// same vaule and weight apart from each other.  This is needes in order 
// to store these objects in a set, since a set contains every object at 
// most once.
// The goal is to choose a subset s from p such that the sum of the 
// weights of the item in s is less than a given maximal weight maxWeight.
// Furthermore, this subset s is to be choosen in a way such that the sum 
// of the values of the items is maximal.  It is assumed that all weights
// are positive natural numbers.

// This procedure solves the 0/1-knapsack problem in a naive way by computing
// all admissable solutions and then taking the maximum. 
//   * problem:   set of triples as described above
//   * maxWeight: maximum admissable weight 
// The result returned is a pair
//     [ value, s ]
// where s is the subset solving the 0/1-knapsack problem and s is the value 
// of the subset s. 
knapsackNaive := procedure(problem, maxWeight) {
    admissable := { s in pow(problem) | weight(s) <= maxWeight };
    maxValue   := max({ value(s) : s in admissable });
    return [ maxValue, arb({ s in admissable | value(s) == maxValue }) ];
};

weight := procedure(s) {
    return 0 +/ [ w : [_, w, _] in s ];
};

value := procedure(s) {
    return 0 +/ [ v : [v, _, _] in s ];
};

// This procedure solves the 0/1-knapsack problem using dynamic programming
// and a simple greedy heuristics.
//   * problem:   set of triples as described above
//   * maxWeight: maximum admissable weight 
knapsackDP := cachedProcedure(problem, maxWeight) {
    if (problem == {}) {
        return [ 0, {} ];
    }
    [v, w, k] := last(problem);
    [v0, s0]  := knapsackDP(problem - { [v, w, k] }, maxWeight);
    if (maxWeight - w >= 0) {
        [v1, s1] := knapsackDP(problem - { [v, w, k] }, maxWeight - w);
        if (v1 + v >= v0) {
            return [v1 + v, s1 + { [v, w, k] }];
        } 
    } 
    return [v0, s0];
};

generateProblem := procedure(n) {
    return { [1 + rnd(20), 1 + rnd(20), i]: i in [1 .. n] };
};

maxWeight := 120;
// problem   := generateProblem(17);
problem := { [1, 1, 12], [5, 15, 10], [6, 2, 16], [9, 13, 14], [11, 6, 8], 
             [11, 10, 11], [13, 10, 2], [14, 2, 17], [15, 10, 3], [15, 20, 5], 
             [16, 1, 4], [17, 11, 15], [17, 18, 13], [18, 14, 1], [19, 7, 7], 
             [19, 9, 9], [19, 18, 6]
           };

start  := now();
[v, s] := knapsackNaive(problem, maxWeight);
stop   := now();
print("naive algorithm using exhaustive search:");
print("s = $s$, value = $v$, weight = $weight(s)$");
// print("$0.001 * (stop - start)$ seconds");

start  := now();
[v, s] := knapsackDP(problem, maxWeight);
stop   := now();
print("greedy algorithm using dynamic programming:");
print("s = $s$, value = $v$, weight = $weight(s)$");
// print("$0.001 * (stop - start)$ seconds");
print(cacheStats(knapsackDP));
clearCache(knapsackDP);

